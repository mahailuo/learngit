#设置全局作者名字、邮箱以便跟踪管理者
git config --global user.name "Your Name"
git config --global user.email "email@example.com"
git config --list
#在当前目录下初始化git，即创建git版本库
git init 

#add命令可添加文件到暂存区，commit命令可提交文件
使用命令git add <file>，注意，可反复多次使用，添加多个文件；
使用命令git commit -m <message>，完成

要随时掌握工作区的状态，使用git status命令
如果git status告诉你有文件被修改过，用git diff <filename> 可以查看修改内容

#查看操作日志
git log 命令显示从最近到最远的提交日志
git log --pretty=oneline  简化日志或者使用 --pretty --oneline
git reflog 用来记录你的每一次命令

#退回到某个版本
git reset --hard HEAD^ 退回到上一个版本
git reset --hard HEAD^^ 上上一个版本
git reset --hard HEAD~100 上100个版本
git reset --hard <commit_id>退回到指定的版本
git reset --hard 1094a

git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

#撤销修改
git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态
tips:还可以撤销刚删除的文件到最新版本

git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库

#删除
rm <file> 删除工作区文件

git rm test.txt
git commit -m "remove test.txt" 通过这两段命令从版本库中删除该文件

#git与github结合
添加ssh https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000
#第一次使用创建需要以下命令
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:mahailuo/learngit.git
git push -u origin master
#第二次即可已使用以下命令
git push origin master
#如果要删除远程 Git 仓库 https://blog.csdn.net/top_code/article/details/50381432
git remote rm origin

#git clone命令
git clone git@github.com:mahailuo/gitskills.git

#git的分支管理
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支Fast forward模式：git merge <name>  
删除分支：git branch -d <name>
合并分支可查看历史记录：git merge --no-ff -m <message> <name>
查看合并历史：git log --graph --pretty=oneline --abbrev-commit

#git bug管理
Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash
git checkout master
git checkout -b issue-101
git add readme.txt 
git commit -m "fix bug 101"
git checkout master
git merge --no-ff -m "merged bug fix 101" issue-101
git checkout dev
git status
git stash list
工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了
git stash list
git stash apply stash@{0}

